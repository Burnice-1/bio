---
---
<div class="portfolio-container">
  <!-- Background Video（常に音量 0 / ミュート） -->
  <video autoplay muted loop playsinline class="background-video" id="bg-video">
    <source src="/background.mp4" type="video/mp4">
    Your browser does not support the video tag.
  </video>

  <div class="content">
    <div class="main-glass-tile" id="glass-tile">
      <div class="cursor-light" id="cursor-light"></div>
      <div class="dot-grid" data-depth="6"></div>

      <div class="tile-content tilt-scope">
        <div class="avatar-container" data-depth="28">
  <img src="https://i.imgur.com/qavTmks_d.png" alt="Profile Avatar" class="avatar no-select" />
  <img src="/witch.png" alt="Avatar Decoration" class="avatar-decoration no-select" />
</div>


        <h1 class="name" data-depth="24">星羅</h1>

        <div class="about-section" data-depth="16">
          <div class="typing-container">
            <span id="typing-text" class="typing-text" data-depth="16"></span>
            <span class="typing-cursor" data-depth="16"></span>
          </div>
        </div>

        <!-- ▼ ガラス音楽プレイヤー（プレイリスト非表示 / 進捗・音量・タイトル） -->
        <div class="player-wrap" id="player">
          <div class="now glass">
            <div id="now-title" class="np-title">--</div>
            <div id="now-time" class="np-time">0:00 / 0:00</div>
          </div>

          <div class="player-core glass">
            <button id="btn-prev" class="btn" aria-label="Previous">⟨⟨</button>
            <button id="btn-play" class="btn primary" aria-label="Play/Pause">▶</button>
            <button id="btn-next" class="btn" aria-label="Next">⟩⟩</button>

            <div class="progress">
              <input id="seek" type="range" min="0" max="1000" value="0" step="1" />
            </div>

            <div class="volume">
              <svg aria-hidden="true" width="18" height="18" viewBox="0 0 24 24"><path fill="currentColor" d="M3 10v4h4l5 5V5L7 10H3z"/></svg>
              <input id="vol" type="range" min="0" max="100" value="70" />
            </div>
          </div>
        </div>

        <!-- Discord -->
        <div class="discord-section">
          <div class="discord-widget">
            <img
              id="discord-status-img"
              src="https://discord.c99.nl/widget/theme-4/1170016878249381982.png"
              alt="Discord Status"
              class="discord-image no-select"
            />
          </div>
        </div>

<!-- ソーシャル -->
<div class="social-icons">
  <a href="https://x.com/5e1ra_JP" 
     class="social-icon brand x" 
     target="_blank" 
     rel="noopener" 
     title="X" 
     aria-label="X">
    <img src="https://cdn.simpleicons.org/x/FFFFFF" 
         alt="X logo" 
         width="20" 
         height="20">
  </a>
  <a href="https://www.youtube.com/channel/UCFPWzpU2TDAQ77FDlRvtR2w" 
     class="social-icon brand youtube" 
     target="_blank" 
     rel="noopener" 
     title="YouTube" 
     aria-label="YouTube">
    <img src="https://cdn.simpleicons.org/youtube/FFFFFF" 
         alt="YouTube logo" 
         width="20" 
         height="20">
  </a>
</div>

      </div><!-- /.tile-content -->
    </div><!-- /.main-glass-tile -->
  </div><!-- /.content -->
</div><!-- /.portfolio-container -->

<style is:global>
  .portfolio-container {
    height: 100vh;
    position: relative;
    overflow: hidden;
    background: transparent;
  }

  .background-video {
    position: fixed;
    inset: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    z-index: 1;
    background: #000;
    pointer-events: none;
    min-width: 100vw;
    min-height: 100vh;
  }

  .content {
    position: relative;
    z-index: 3;
    height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 1rem;
    perspective: 900px;
  }

  .main-glass-tile{
    --tiltX: 0deg; --tiltY: 0deg; --tiltScale: 1;
    position: relative;
    background: linear-gradient(135deg, rgba(255,255,255,.15), rgba(255,255,255,.10) 50%, rgba(255,255,255,.05));
    border-radius: 16px;
    padding: 1.25rem 1rem 1.25rem;
    border: 1px solid rgba(255,255,255,.25);
    box-shadow: 0 4px 16px rgba(0,0,0,.2);
    opacity: 0;
    transform: translateY(24px) rotateX(var(--tiltX)) rotateY(var(--tiltY)) scale(var(--tiltScale));
    animation: fadeInUpTilt 0.8s ease-out 0.3s forwards;
    transform-style: preserve-3d;
    will-change: transform;
    width: min(760px, 95vw);
    max-height: min(80vh, 720px);
    overflow: auto;
    overscroll-behavior: contain;
  }

  .main-glass-tile::-webkit-scrollbar { width: 8px; }
  .main-glass-tile::-webkit-scrollbar-thumb {
    background: rgba(255,255,255,.25);
    border-radius: 8px;
  }
  .main-glass-tile { scrollbar-width: thin; scrollbar-color: rgba(255,255,255,.25) transparent; }

  @keyframes fadeInUpTilt {
    0% { opacity: 0; transform: translateY(24px) rotateX(var(--tiltX)) rotateY(var(--tiltY)) scale(var(--tiltScale)); }
    100%{ opacity: 1; transform: translateY(0)  rotateX(var(--tiltX)) rotateY(var(--tiltY)) scale(var(--tiltScale)); }
  }

  .cursor-light { display: none !important; }

  .dot-grid {
    position: absolute; inset: 0;
    opacity: .03;
    background-image: radial-gradient(circle, rgba(255,255,255,.8) 1px, transparent 1px);
    background-size: 20px 20px;
    pointer-events: none;
    border-radius: 16px;
  }

  .tile-content {
    position: relative; z-index: 2;
    display: flex; flex-direction: column; align-items: center;
    gap: .9rem; text-align: center; width: 100%;
    padding: 0 .25rem .5rem;
    box-sizing: border-box;
  }

  /* stacking を安定させる */
.avatar-container{
  position: relative;
  width: 96px; height: 96px;
  display:flex; justify-content:center; align-items:center;
  isolation: isolate; /* ← これで子の z-index が確実に効く */
}

/* アバターを一段下に */
.avatar{
  position: relative;
  z-index: 1;
  width:96px; height:96px;
  border-radius:50%;
}

/* 飾りを最前面へ */
.avatar-decoration{
  position: absolute;
  top:-10px; left:-10px;
  width:120px; height:120px;
  z-index: 2;               /* ← アバターより高く */
  transform: translateZ(1px); /* ← 前面に固定（保険） */
  pointer-events: none;
  mix-blend-mode: normal;   /* 必要なら screen に戻してOK */
  opacity: .95;
}

  @keyframes avatarGlow {
    from { box-shadow: 0 0 30px rgba(255,255,255,.3), 0 0 60px rgba(255,255,255,.2); }
    to   { box-shadow: 0 0 40px rgba(255,255,255,.5), 0 0 80px rgba(255,255,255,.3); }
  }

  .name {
    font-size: 1.6rem; font-weight: 300; margin: 0; color: #fff; letter-spacing: .5px;
    text-shadow: 0 0 4px rgba(255,255,255,.7), 0 0 8px rgba(255,255,255,.5), 0 0 12px rgba(255,255,255,.3), 0 0 20px rgba(255,255,255,.15);
  }

  .about-section { width: 100%; }
  .typing-container { display:flex; align-items:center; justify-content:center; min-height:2em; width:100%; }
  .typing-text {
    color: rgba(255,255,255,.9); font-size:.9rem; line-height:1.5; font-weight:200; text-align:center;
    font-family:'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; letter-spacing:.3px;
    text-shadow: 0 1px 3px rgba(0,0,0,.3); max-width:420px; word-wrap:break-word; overflow-wrap: break-word;
  }
  .typing-cursor { display:inline-block; width:2px; height:1.2em; background: rgba(255,255,255,.8); margin-left:3px; animation: cursorBlink 1s infinite; vertical-align: baseline; }
  @keyframes cursorBlink { 0%,50%{opacity:1} 51%,100%{opacity:0} }

  /* ==== ガラスプレイヤー ==== */
  .glass {
    background: rgba(255,255,255,0.10);
    border: 1px solid rgba(255,255,255,0.25);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border-radius: 14px;
    box-shadow: 0 8px 28px rgba(0,0,0,0.25);
  }
  .player-wrap {
    width: 100%;
    max-width: 420px;
    display: grid;
    gap: .6rem;
    margin-top: .25rem;
  }
  .now { display:grid; gap:.25rem; padding:.65rem .8rem; text-align:left; }
  .np-title { font-size:.92rem; font-weight:600; color:#fff; overflow:hidden; text-overflow:ellipsis; white-space:nowrap; }
  .np-time  { font-size:.82rem; color:rgba(255,255,255,.85); }

  .player-core {
    display: grid;
    align-items: center;
    grid-template-columns: auto auto auto 1fr auto;
    gap: .6rem;
    padding: .65rem .75rem;
  }
  .btn {
    appearance: none;
    border: 0;
    border-radius: 10px;
    padding: .45rem .6rem;
    background: rgba(255,255,255,0.12);
    color: #fff;
    cursor: pointer;
    transition: transform .15s ease, background .2s ease;
  }
  .btn:hover { transform: translateY(-2px); background: rgba(255,255,255,0.18); }
  .btn.primary { font-weight: 600; }

  .progress { display: grid; grid-template-columns: 1fr; gap: .35rem; align-items: center; }
  .progress input[type="range"] {
    width: 100%;
    appearance: none;
    height: 8px;
    border-radius: 999px;
    background: linear-gradient(90deg, rgba(255,255,255,.9) 0%, rgba(255,255,255,.4) 100%);
    outline: none;
  }
  .progress input[type="range"]::-webkit-slider-thumb {
    appearance: none;
    width: 16px; height: 16px;
    border-radius: 50%;
    background: #fff;
    box-shadow: 0 2px 10px rgba(0,0,0,.3);
    cursor: pointer;
  }

  .volume {
    display: flex; align-items: center; gap: .4rem;
    min-width: 150px;
    padding-left: .25rem;
  }
  .volume input[type="range"] {
    width: 110px;
    appearance: none;
    height: 8px;
    border-radius: 999px;
    background: linear-gradient(90deg, rgba(255,255,255,.8) 0%, rgba(255,255,255,.35) 100%);
    outline: none;
  }
  .volume input[type="range"]::-webkit-slider-thumb {
    appearance: none;
    width: 14px; height: 14px;
    border-radius: 50%;
    background: #fff;
    box-shadow: 0 2px 10px rgba(0,0,0,.3);
    cursor: pointer;
  }

  .discord-section { width:100%; display:flex; justify-content:center; }
  .discord-widget { display:flex; justify-content:center; align-items:center; width:100%; }
  .discord-image { max-width:100%; width:auto; height:auto; border-radius:8px; box-shadow:0 4px 16px rgba(0,0,0,.3); border:1px solid rgba(255,255,255,.1); transition: all .3s ease; background: rgba(54,57,63,.1); }
  .discord-image:hover { transform: translateY(-2px); box-shadow: 0 8px 32px rgba(0,0,0,.4); border-color: rgba(255,255,255,.2); }

  .social-icons{
    display: grid !important;
    grid-auto-flow: column;
    grid-auto-columns: max-content;
    justify-content: center;
    align-items: center;
    gap: 1rem;
    width: 100%;
    margin-top: 1rem;
    padding: 0 8px;
    white-space: nowrap;
    overflow: visible;
  }
  .social-icons > a{
    display: inline-grid !important;
    place-items: center;
    min-width: 0; min-height: 0;
  }
  .social-icon { width: 44px; height: 44px; border-radius: 50%; display:inline-grid; place-items:center; transition: transform .3s ease, box-shadow .3s ease, filter .3s ease; background: currentColor; }
  .social-icon img { display:block; width: 20px; height: 20px; filter: none; }
  .social-icon.brand:hover { filter: brightness(1.08); transform: translateY(-3px) scale(1.06); box-shadow: 0 8px 25px rgba(0,0,0,.25); }

  .social-icon.discord { color:#5865F2; }
  .social-icon.x       { color:#000000; }
  .social-icon.youtube { color:#FF0000; }
  .social-icon.fortnite{ color:#9146FF; }
  .social-icon.osu     { color:#FF66AA; }
  .social-icon.steam   { color:#171A21; }

  .no-select { user-select: none; pointer-events: none; }

  @media (max-width: 768px){
    .main-glass-tile{ width: 95vw; max-height: 82vh; }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const glassTile = document.getElementById('glass-tile');
    const cursorLight = document.getElementById('cursor-light');
    const discordImage = document.getElementById('discord-status-img');
    const avatar = document.querySelector('.avatar');
    const avatarDecoration = document.querySelector('.avatar-decoration');

    // ▼ BG動画は常にミュート
    (function () {
      const bgVideo = document.getElementById('bg-video');
      if (!bgVideo) return;
      const forceMute = () => { try { bgVideo.muted = true; bgVideo.volume = 0; } catch {} };
      forceMute();
      if (bgVideo.readyState < 2) bgVideo.addEventListener('loadeddata', forceMute, { once:true });
    })();

    // Cursor light（非表示のまま）
    if (glassTile && cursorLight) {
      glassTile.addEventListener('mousemove', (e) => {
        const rect = glassTile.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        cursorLight.style.left = x + 'px';
        cursorLight.style.top = y + 'px';
        cursorLight.style.opacity = '1';
      });
      glassTile.addEventListener('mouseleave', () => { cursorLight.style.opacity = '0'; });
    }

    // Discord 画像リトライ
    if (discordImage) {
      let retryCount = 0;
      const maxRetries = 5;
      const baseUrl = 'https://discord.c99.nl/widget/theme-4/1327624321375535184.png';
      const loadDiscordImage = () => {
        const t = Date.now();
        const r = Math.random().toString(36).slice(2);
        discordImage.src = `${baseUrl}?v=${Math.floor(Math.random()*1000)}&t=${t}&r=${r}`;
      };
      discordImage.addEventListener('error', () => {
        if (retryCount++ < maxRetries) setTimeout(loadDiscordImage, 1000*retryCount);
        else { discordImage.style.display = 'none'; }
      });
      loadDiscordImage();
    }

    // 画像の右クリ&ドラッグ無効
    [discordImage, avatar, avatarDecoration].forEach(img => {
      if (!img) return;
      img.addEventListener('contextmenu', e => { e.preventDefault(); return false; });
      img.addEventListener('dragstart', e => { e.preventDefault(); return false; });
    });

 document.querySelectorAll('[data-copy]').forEach(el => {
      el.addEventListener('click', e => {
        e.preventDefault(); // ページ遷移防止
        const text = el.getAttribute('data-copy');
        navigator.clipboard.writeText(text).then(() => {
          // コピー成功時のフィードバック
          el.title = `コピーしました: ${text}`;
        }).catch(err => {
          console.error('コピー失敗:', err);
        });
      });
    });
    // === タイピング：完全同期版（多重起動・混ざり防止） ===
    (function () {
      const typingText = document.getElementById('typing-text');
      const cursor = document.querySelector('.typing-cursor');
      if (!(typingText && cursor)) return;

      const lines = [
        "dsc.gg/apxgp"
      ];

      let started = false;
      const typeDelay = 80;
      const eraseDelay = 40;
      const holdAfterType = 1200;
      const holdAfterErase = 300;

      const sleep = (ms) => new Promise(r => setTimeout(r, ms));

      async function runTyping() {
        let i = 0;
        while (true) {
          const line = lines[i];
          for (let c = 1; c <= line.length; c++) {
            typingText.textContent = line.slice(0, c);
            await sleep(typeDelay);
          }
          await sleep(holdAfterType);
          for (let c = line.length - 1; c >= 0; c--) {
            typingText.textContent = line.slice(0, c);
            await sleep(eraseDelay);
          }
          typingText.textContent = "";
          await sleep(holdAfterErase);
          i = (i + 1) % lines.length;
        }
      }

      function start() {
        if (started) return;
        started = true;
        runTyping();
      }

      window.addEventListener('app:entered', start, { once: true });
      setTimeout(start, 1500);
    })();

    // ===== 3Dチルト（即追従＋落ち着き） =====
    (function () {
      const tile = document.getElementById('glass-tile');
      if (!tile) return;
      const reduceMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
      if (reduceMotion) return;

      const maxTilt = 20;
      let rect = tile.getBoundingClientRect();
      let rx = 0, ry = 0;
      let targetRX = 0, targetRY = 0;
      let rafId = null;

      const clamp = (v, m) => Math.max(-m, Math.min(m, v));
      const lerp = (a,b,t)=>a+(b-a)*t;

      function updateRect(){ rect = tile.getBoundingClientRect(); }
      window.addEventListener('resize', updateRect);
      window.addEventListener('scroll', updateRect, { passive:true });

      function onMove(e){
        const cx = e.clientX, cy = e.clientY;
        const x = (cx - rect.left) / rect.width - 0.5;
        const y = (cy - rect.top) / rect.height - 0.5;
        targetRY = clamp(x * maxTilt, maxTilt);
        targetRX = clamp(-y * maxTilt, maxTilt);
        if (rafId == null) rafId = requestAnimationFrame(tick);
      }

      function tick(){
        // 即追従寄り（t=0.35）で落ち着きも少し残す
        rx = lerp(rx, targetRX, 0.35);
        ry = lerp(ry, targetRY, 0.35);
        tile.style.transform = `rotateX(${rx}deg) rotateY(${ry}deg)`;
        if (Math.abs(rx-targetRX)>0.02 || Math.abs(ry-targetRY)>0.02) {
          rafId = requestAnimationFrame(tick);
        } else {
          rafId = null;
        }
      }

      tile.addEventListener('pointermove', onMove, { passive:true });
      tile.addEventListener('pointerenter', updateRect, { passive:true });
    })();

    // ===== コンパクト音楽プレイヤー（manifest.json を使用） =====
    (function () {
      const nowTitle = document.getElementById('now-title');
      const nowTime  = document.getElementById('now-time');
      const btnPlay  = document.getElementById('btn-play');
      const btnPrev  = document.getElementById('btn-prev');
      const btnNext  = document.getElementById('btn-next');
      const seek     = document.getElementById('seek');
      const vol      = document.getElementById('vol');

      const audio = new Audio();
      audio.preload = 'metadata';
      audio.crossOrigin = 'anonymous';

      let list = [];  // ["a.mp3", ...]
      let idx  = 0;
      let rafId = null;

      const fmt = s => {
        s = Math.max(0, Math.floor(s||0));
        const m = Math.floor(s/60);
        const ss = (s%60).toString().padStart(2,'0');
        return `${m}:${ss}`;
      };

      function setNow(){
        const file = list[idx] || '';
        const name = file.replace(/^.*\//,'').replace(/\.mp3$/i,'') || '--';
        nowTitle.textContent = name;
        nowTime.textContent  = `${fmt(audio.currentTime||0)} / ${isFinite(audio.duration)?fmt(audio.duration):'0:00'}`;
        btnPlay.textContent  = audio.paused ? '▶' : '⏸';
      }

      function tick(){
        if (isFinite(audio.duration)) {
          seek.value = String(Math.round((audio.currentTime/audio.duration)*1000));
        } else {
          seek.value = '0';
        }
        nowTime.textContent = `${fmt(audio.currentTime||0)} / ${isFinite(audio.duration)?fmt(audio.duration):'0:00'}`;
        rafId = requestAnimationFrame(tick);
      }

      function startTick(){ if (rafId==null) rafId = requestAnimationFrame(tick); }
      function stopTick(){ if (rafId!=null) cancelAnimationFrame(rafId), rafId=null; }

      function load(i, autoplay=false){
        if (!list.length) return;
        idx = (i + list.length) % list.length;
        audio.src = `/sound/${list[idx]}`;
        audio.currentTime = 0;
        setNow();
        if (autoplay) audio.play().catch(()=>{});
      }

      // controls
      btnPlay.addEventListener('click', () => {
        if (!list.length) return;
        if (audio.paused) audio.play().catch(()=>{}); else audio.pause();
      });
      btnPrev.addEventListener('click', () => load(idx-1, true));
      btnNext.addEventListener('click', () => load(idx+1, true));

      audio.addEventListener('play', () => { btnPlay.textContent='⏸'; startTick(); });
      audio.addEventListener('pause', () => { btnPlay.textContent='▶';  stopTick();  });
      audio.addEventListener('ended', () => load(idx+1, true));
      audio.addEventListener('loadedmetadata', setNow);
      audio.addEventListener('timeupdate', setNow);

      // seek
      seek.addEventListener('input', () => {
        if (!isFinite(audio.duration)) return;
        const p = Number(seek.value)/1000;
        audio.currentTime = p*audio.duration;
      });

      // volume
      audio.volume = Math.max(0, Math.min(1, Number(vol.value)/100));
      vol.addEventListener('input', () => {
        audio.volume = Math.max(0, Math.min(1, Number(vol.value)/100));
      });

      // Enter後に自動再生（保険で任意の初回クリックでも）
      const startPlayback = () => { if (list.length) load(0, true); };
      window.addEventListener('app:entered', startPlayback, { once:true });
      document.addEventListener('click', startPlayback, { once:true });

      // manifest.json 読み込み
      (async () => {
        try {
          const res = await fetch('/sound/manifest.json', { cache:'no-store' });
          const arr = await res.json();
          list = (Array.isArray(arr) ? arr : []).filter(f => /\.mp3$/i.test(f));
        } catch { list = []; }
        if (list.length) { load(0, false); setNow(); }
        else { nowTitle.textContent = 'No audio found'; }
      })();
    })();
  });
</script>
