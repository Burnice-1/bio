---
export interface Props { title?: string; }
const { title = '34454' } = Astro.props;
const scrollingText = ``;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/png" href="https://i.imgur.com/pYn7dzp_d.png" />
    <meta name="generator" content={Astro.generator} />
    <title id="page-title">{title}</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600&display=swap" rel="stylesheet" />
  </head>
  <body>
    <div id="enter-screen" class="enter-screen">
      <div class="enter-text">Click To Enter</div>
    </div>

    <div id="main-content" class="main-content hidden">
      <slot />
    </div>

    <script define:vars={{ scrollingText }}>
      let currentIndex = 0;
      const titleElement = document.getElementById('page-title');

      function updateTitle() {
        const nextChars = scrollingText.slice(currentIndex, currentIndex + 60);
        titleElement.textContent = nextChars;
        currentIndex = (currentIndex + 1) % (scrollingText.length || 1);
      }
      function startTitleAnimation() {
        if (!scrollingText || scrollingText.length === 0) return;
        setInterval(updateTitle, 80);
      }

      function initTilt() {
        const tile = document.getElementById('glass-tile');
        if (!tile || tile.__tiltBound) return;
        tile.__tiltBound = true;

        const reduceMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
        if (reduceMotion) return;

        const maxTilt = 20, EDGE_LOCK = 0.45, DEADZONE = 0.003;
        let rect = tile.getBoundingClientRect();
        let targetRX = 0, targetRY = 0, targetScale = 1;
        let currentRX = 0, currentRY = 0, currentScale = 1;
        let rafId = null;

        const lerp = (a, b, t) => a + (b - a) * t;
        function updateRect(){ rect = tile.getBoundingClientRect(); }

        function onPointerMove(e) {
          const cx = e.clientX ?? e.touches?.[0]?.clientX;
          const cy = e.clientY ?? e.touches?.[0]?.clientY;
          if (cx == null || cy == null) return;
          const relX = Math.min(Math.max(cx - rect.left, 0), rect.width);
          const relY = Math.min(Math.max(cy - rect.top, 0), rect.height);
          let x = relX / rect.width - 0.5;
          let y = relY / rect.height - 0.5;
          if (Math.abs(x) >= EDGE_LOCK) x = Math.sign(x) * EDGE_LOCK;
          if (Math.abs(y) >= EDGE_LOCK) y = Math.sign(y) * EDGE_LOCK;
          targetRY = x * maxTilt;
          targetRX = -y * maxTilt;
          if (rafId == null) rafId = requestAnimationFrame(tick);
        }
        function onPointerEnter(){ targetScale = 1.12; if (rafId == null) rafId = requestAnimationFrame(tick); }
        function onPointerLeave(){ targetScale = 1; targetRX = 0; targetRY = 0; if (rafId == null) rafId = requestAnimationFrame(tick); }

        function tick() {
          currentRX = lerp(currentRX, targetRX, 0.12);
          currentRY = lerp(currentRY, targetRY, 0.12);
          currentScale = lerp(currentScale, targetScale, 0.08);
          tile.style.setProperty('--tiltX', currentRX.toFixed(3) + 'deg');
          tile.style.setProperty('--tiltY', currentRY.toFixed(3) + 'deg');
          tile.style.setProperty('--tiltScale', currentScale.toFixed(3));
          const moving =
            Math.abs(currentRX - targetRX) > DEADZONE ||
            Math.abs(currentRY - targetRY) > DEADZONE ||
            Math.abs(currentScale - targetScale) > 0.0005;
          if (moving) {
            rafId = requestAnimationFrame(tick);
          } else {
            cancelAnimationFrame(rafId);
            rafId = null;
          }
        }

        window.addEventListener('resize', updateRect);
        window.addEventListener('scroll', updateRect, { passive: true });
        tile.addEventListener('pointermove', onPointerMove, { passive: true });
        tile.addEventListener('pointerenter', onPointerEnter, { passive: true });
        tile.addEventListener('pointerleave', onPointerLeave, { passive: true });
      }

      document.addEventListener('DOMContentLoaded', () => {
        const enterScreen = document.getElementById('enter-screen');
        const mainContent = document.getElementById('main-content');

        function handleEnter() {
          enterScreen.style.opacity = '0';
          enterScreen.style.transform = 'scale(1.06)';
          setTimeout(() => {
            enterScreen.style.display = 'none';
            mainContent.classList.remove('hidden');
            initTilt();

            // ▼ Portfolio 側で拾って自動再生
            window.dispatchEvent(new CustomEvent('app:entered'));
          }, 450);
        }

        enterScreen.addEventListener('click', handleEnter);
        document.addEventListener('keydown', (e) => {
          if (e.code === 'Space' || e.code === 'Enter') {
            e.preventDefault();
            if (!enterScreen.style.display || enterScreen.style.display !== 'none') handleEnter();
          }
        });
      });
    </script>
  </body>
</html>

<style is:global>
  * { margin: 0; padding: 0; box-sizing: border-box; }

  ::selection { background-color: transparent; color: #fff; text-shadow: 0 0 4px rgba(255,255,255,0.7), 0 0 8px rgba(255,255,255,0.5), 0 0 12px rgba(255,255,255,0.3), 0 0 20px rgba(255,255,255,0.15); }
  ::-moz-selection { background-color: transparent; color: #fff; text-shadow: 0 0 4px rgba(255,255,255,0.7), 0 0 8px rgba(255,255,255,0.5), 0 0 12px rgba(255,255,255,0.3), 0 0 20px rgba(255,255,255,0.15); }

  html { font-family: 'Inter', system-ui, sans-serif; scroll-behavior: smooth; }
  body { min-height: 100vh; background: #000; color: #fff; overflow: hidden; font-weight: 300; }

  .enter-screen { position: fixed; inset: 0; background: #000; display: flex; justify-content: center; align-items: center; z-index: 9999; transition: all .45s ease; cursor: default; }
  .enter-text { font-size: 2.4rem; font-weight: 300; color: #fff; text-shadow: 0 0 30px rgba(255,255,255,0.5); letter-spacing: 2px; animation: enterPulse 2s ease-in-out infinite alternate; user-select: none; }
  @keyframes enterPulse { from { opacity: .75; transform: scale(1); } to { opacity: 1; transform: scale(1.05); } }

  .main-content { opacity: 1; transition: opacity .45s ease; perspective: 900px; perspective-origin: 50% 50%; }
  .main-content.hidden { opacity: 0; pointer-events: none; }

  ::-webkit-scrollbar { width: 6px; }
  ::-webkit-scrollbar-track { background: rgba(255,255,255,0.05); }
  ::-webkit-scrollbar-thumb { background: rgba(255,255,255,0.2); border-radius: 3px; }
  ::-webkit-scrollbar-thumb:hover { background: rgba(255,255,255,0.4); }
  .no-select { user-select: none; }
</style>
